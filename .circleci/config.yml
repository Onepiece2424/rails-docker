version: 2
jobs:
  build:
    docker:
      - image: circleci/ruby:2.7.0-node-browsers
        environment:
          - BUNDLER_VERSION: 2.2.32
          - RAILS_ENV: "test"
      - image: circleci/mysql:5.7
        environment:
          - MYSQL_ALLOW_EMPTY_PASSWORD: "true"
          - MYSQL_ROOT_HOST: "127.0.0.1"

    working_directory: ~/rails-docker

    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "Gemfile.lock" }}
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            gem install bundler -v 2.2.32
            bundle install --jobs=4 --retry=3 --path vendor/bundle

      - save_cache:
          paths:
            - ./vendor/bundle
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}

      - run: mv ./config/database.yml.ci ./config/database.yml

      - run:
          name: Databasesetup
          command: |
            bundle exec rake db:create
            bundle exec rake db:schema:load

      - run:
          name: Run rspec
          command: |
            mkdir /tmp/test-results
            TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | \
              circleci tests split --split-by=timings)"

            bundle exec rspec \
              --format progress \
              --format RspecJunitFormatter \
              --out /tmp/test-results/rspec.xml \
              --format progress \
              $TEST_FILES

      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results

  rubocop:
    working_directory: ~/rails-docker
    docker:
      - image: circleci/ruby:2.7.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - gemfiles-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
            - gemfiles-{{ .Branch }}-
            - gemfiles-master-
      - run: bundle config --local path vendor/bundle
      - run:
          name: bundle install
          command: bundle check || bundle install --jobs=8 --clean
      - run:
          name: Run rubocop
          command: bundle exec rubocop --parallel
      - save_cache:
          key: gemfiles-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

  rspec:
    working_directory: ~/rails-docker
    docker:
      - image: circleci/ruby:2.7.0-node-browsers
        environment:
          - BUNDLER_VERSION: 2.2.32
          - RAILS_ENV: "test"
      - image: circleci/mysql:5.7
        environment:
          - MYSQL_ROOT_PASSWORD: password
          - MYSQL_ROOT_HOST: "127.0.0.1"
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "Gemfile.lock" }}
            - v1-dependencies-
      - run: bundle install --jobs=4 --retry=3 --path vendor/bundle
      - run: yarn install
      - save_cache:
          paths:
            - ./vendor/bundle
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}
      - run:
          name: Rspec
          command: bundle exec rspec

  # deploy:
  #   working_directory: ~/rails-docker
  #   docker:
  #     # - image: sue445/heroku-cli
  #     - image: circleci/ruby:2.7.0-node-browsers
  #   steps:
  #     - checkout
  #     - run:
  #       name: Deploy Master to Heroku
  #       command: |
  #         if [ "${CIRCLE_BRANCH}" == "master" ]; then
  #           git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git master
  #         fi

  # deploy:
  #   # machine:
  #   #   enabled: true
  #   working_directory: ~/rails-docker
  #   # environment:
  #     # HEROKU_APP: "sleepy-refuge-55486" # define env var $HEROKU_APP
  #   steps:
  #     - checkout
  #     # - run:
  #     #     name: Setup Heroku
  #     #     command: bash .circleci/setup-heroku.sh # run a script to set up Heroku

  #     # - run:
  #     #     command: |
  #     #       git push heroku task:master
  #     #       heroku run rake db:migrate
  #     #       sleep 5 # sleep for 5 seconds to wait for dynos
  #     #       heroku restart

  #     - run:
  #         name: Delete old apps if needed
  #         command: for app_name in $APP_NAMES_TO_REMOVE; do heroku apps:destroy -a $app_name -c $app_name; done
  #     - run:
  #         name: Define Heroku app name to create
  #         command: timestamp=`date +%Y%m%d%H%M%S` && echo "export HEROKU_APP_NAME=potepanec-$timestamp" >> $BASH_ENV
  #     # - run:
  #     #     name: Create fresh Heroku app
  #     #     command: heroku apps:create $HEROKU_APP_NAME --addons=jawsdb:kitefin
  #     - run:
  #         name: Deploy
  #         command: git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git HEAD:master

  deploy_stage:
    docker:
      - image: circleci/ruby:2.7.0-node-browsers
    working_directory: /tmp/rails-docker
    steps:
      - checkout
      - run:
          name: 'Install Heroku CLI, if necessary'
          command: |
            if [[ $(command -v heroku) == "" ]]; then
              curl https://cli-assets.heroku.com/install.sh | sh
            else
              echo "Heroku is already installed. No operation was performed."
            fi
      - run:
          name: heroku maintenance on
          command: heroku maintenance:on --app ${HEROKU_APP_NAME_STAGE}
      - run:
          name: Deploy to Heroku_Staging
          command: |
            git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME_STAGE.git master
      - run:
          name: heroku maintenance off
          command: heroku maintenance:on --app ${HEROKU_APP_NAME_STAGE}

  deploy:
    docker:
      - image: circleci/ruby:2.7.0-node-browsers
      - image: sue445/heroku-cli
    working_directory: /tmp/rails-docker
    steps:
      - checkout
      - run:
          name: 'Install Heroku CLI, if necessary'
          command: |
            if [[ $(command -v heroku) == "" ]]; then
              curl https://cli-assets.heroku.com/install.sh | sh
            else
              echo "Heroku is already installed. No operation was performed."
            fi
      - run:
          name: heroku maintenance on
          command: heroku maintenance:on --app ${HEROKU_APP_NAME}
      - run:
          name: Deploy to Heroku_Production
          command: |
            git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git master
      - run:
          name: heroku maintenance off
          command: heroku maintenance:off --app ${HEROKU_APP_NAME}

  # deploy:
  #   docker:
  #     - image: circleci/ruby:2.7.0-node-browsers
  #     - image: sue445/heroku-cli
  #   working_directory: ~/rails-docker
  #   steps:
  #     - checkout
  #     - run:
  #       name: Deploy Master to Heroku
  #       command: |
  #         if [ "${CIRCLE_BRANCH}" == "master" ]; then
  #           git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git master
  #         fi

workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - rubocop
      - rspec
      - deploy_stage
      - deploy:
          requires:
            - rspec
            - rubocop
